datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique @default(cuid())
  password      String?   @db.Text()
  name          String?
  bio           String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  posts     Post[]    @relation("UserPosts")
  comments  Comment[] @relation("UserComments")
  likes     Like[]
  followers Follow[]  @relation("UserFollowers")
  following Follow[]  @relation("UserFollowing")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  authorId   String
  likesCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author   User      @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  Like     Like[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // prevent duplicate likes
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Comment {
  id         String @id @default(cuid())
  content    String @db.Text
  postId     String
  userId     String
  likesCount Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([postId, userId])
}
