datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Post      Post[]
  Comment   Comment[]
  Like      Like[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id       String @id @default(cuid())
  title    String
  content  String @db.Text
  authorId String
  author   User?  @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  Like      Like[]
}

model Comment {
  id           String @id @default(cuid())
  content      String @db.Text
  postId       String
  post         Post?  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comentatorId String
  comentator   User?  @relation(fields: [comentatorId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     String @id @default(cuid())
  postId String
  post   Post?  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
