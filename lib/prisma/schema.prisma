datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String?
  bio           String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")
  Repost    Repost[]
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id       String @id @default(cuid())
  title    String
  content  String @db.Text
  authorId String
  author   User?  @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Comment  Comment[]
  Like     Like[]
  repostId String?
  Repost   Repost?
}

model Repost {
  id     String @id @default(cuid())
  userId String
  postId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String @id @default(cuid())
  content   String @db.Text
  postId    String
  post      Post?  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
  comment   User?  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     String @id @default(cuid())
  postId String
  post   Post?  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([postId, userId])
}
